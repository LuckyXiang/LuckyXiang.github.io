<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[MarkDown专用版破解方法]]></title>
      <url>/2016/07/01/MarkDown%E4%B8%93%E7%94%A8%E7%89%88%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>使用下面的邮箱和授权秘钥破解MarkDown专用版</p>
<p><strong>邮箱：</strong> soar360@live.com</p>
<p><strong>授权秘钥：</strong></p>
<p>GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</p>
]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决Android Studio引用远程仓库(JCenter)下载慢]]></title>
      <url>/2016/07/01/%E8%A7%A3%E5%86%B3android%20studio%E5%BC%95%E7%94%A8%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%B8%8B%E8%BD%BD%E6%85%A2(JCenter%E4%B8%8B%E8%BD%BD%E6%85%A2)/</url>
      <content type="html"><![CDATA[<h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p>使用开源中国的maven库<a href="http://maven.aliyun.com/nexus/content/groups/public/" target="_blank" rel="external">阿里云的(速度巨快)</a></p>
<p><strong>替换项目根目录下build.gradle中</strong></p>
<pre class=" language-gradle"><code class="language-gradle">repositories {
    jcenter()
}
</code></pre>
<p>改为</p>
<pre class=" language-gradle"><code class="language-gradle">repositories {
    maven{url 'http://maven.aliyun.com/nexus/content/groups/public/'}
}
</code></pre>
<h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>修改https为 http协议下载（<a href="http://jcenter/bintray.com/）" target="_blank" rel="external">http://jcenter/bintray.com/）</a></p>
<p><strong>替换项目根目录下build.gradle中</strong></p>
<pre class=" language-gradle"><code class="language-gradle">repositories {
    jcenter()
}
</code></pre>
<p>改为</p>
<pre class=" language-gradle"><code class="language-gradle">repositories {
    jcenter(){ url 'http://jcenter.bintray.com/'}
}
</code></pre>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mosby MVP的使用]]></title>
      <url>/2016/06/10/%E5%BC%80%E6%BA%90%E5%BA%93_Mosby%20MVP%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>Android中Mosby MVP的使用</p>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="MVP简介"><a href="#MVP简介" class="headerlink" title="MVP简介"></a>MVP简介</h3><p>MVP的出发点是关注点分离，将视图和业务逻辑解耦。Model-View-Presenter三个部分可以简单理解为：</p>
<ul>
<li><strong>Model</strong>是将在视图中显示的数据。</li>
<li><strong>View</strong>是显示数据(model)的界面，同时将用户指令(事件)发送给Presenter来处理。View通常含有Presenter的引用。在Android中Activity，Fragment和ViewGroup都扮演视图的角色。</li>
<li><strong>Presenter</strong>是中间人，同时有两者的引用。<strong>请注意单词model非常有误导性。它应该是获取或处理model的业务逻辑</strong>。例如：如果你的数据库表中存储着User，而你的视图想显示用户列表，那么Presenter将有一个数据库业务逻辑(例如DAO)类的引用，Presenter通过它来查询用户列表。</li>
</ul>
<blockquote>
<p><strong>思考</strong>：MVC，MVP和MVVM之间有什么区别和联系？</p>
</blockquote>
<p><strong>消极视图</strong>：在MVP中，View是<strong>消极视图(Passive View)</strong>，也就是说它尽量不去主动做事，而是让Presenter通过抽象方式控制View，例如Presenter调用view.showLoading()方法来显示加载效果，但Presenter不应该控制View的具体实现，例如动画，所以Presenter不应该调用view.startAnimation()这样的方法。</p>
<p><img src="http://ovmzdfex7.bkt.clouddn.com/17-9-2/8664195.jpg" alt=""></p>
<h3 id="Mosby简介"><a href="#Mosby简介" class="headerlink" title="Mosby简介"></a>Mosby简介</h3><p><strong>设计目标</strong>：让你能用清晰的Model-View-Presenter架构来构建Android app。</p>
<p><strong>注意</strong>：Mosby是一个库(library)，不是一个框架(framework)。</p>
<blockquote>
<p><strong>思考</strong>：什么是library？什么是framework？它们的区别是什么？</p>
</blockquote>
<p>Mosby的内核是一个基于委托模式(delegation)的很精简的库。你可以使用委托(delegation)和组合(composition)将Mosby集成到你的开发技术栈中。这样你就能避免框架(framework)带来的限制和约束。</p>
<blockquote>
<p><strong>思考</strong>：什么是委托模式？委托和继承的区别是什么？使用委托有什么好处？</p>
</blockquote>
<p><strong>依赖</strong>：<br>Mosby被分成模块，你可以选择你需要的功能：</p>
<pre class=" language-java"><code class="language-java">dependencies <span class="token punctuation">{</span>
    compile <span class="token string">'com.hannesdorfmann.mosby:mvp:2.0.1'</span>
    compile <span class="token string">'com.hannesdorfmann.mosby:viewstate:2.0.1'</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="Hello-MVP-World"><a href="#Hello-MVP-World" class="headerlink" title="Hello MVP World"></a>Hello MVP World</h3><p>先来用Mosby MVP库来实现一个最简单的功能，页面有两个Button和一个TextView，需求如下：</p>
<ul>
<li>点击Hello按钮，显示红色文本 “Hello” + 随机数；</li>
<li>点击Goodbye按钮，显示蓝色文本 “Goodbye” + 随机数；<br>这里假设随机数的生成过程涉及到复杂的业务逻辑计算，是一个耗时操作，需要2s时间。</li>
</ul>
<p><strong>第一步</strong>我们用一个AsyncTask来实现这个模拟的业务逻辑，在自定义的AsyncTask中，要定义一个监听器，用来传递业务逻辑执行结果：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreetingGeneratorTask</span> <span class="token keyword">extends</span> <span class="token class-name">AsyncTask</span><span class="token operator">&lt;</span>Void<span class="token punctuation">,</span> Void<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">// Callback - listener</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GreetingTaskListener</span><span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">onGreetingGenerated</span><span class="token punctuation">(</span>String greetingText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment" spellcheck="true">// 模拟计算过程，返回一个随机值。</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> Integer <span class="token function">doInBackground</span><span class="token punctuation">(</span>Void<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPostExecute</span><span class="token punctuation">(</span>Integer randomInt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        listener<span class="token punctuation">.</span><span class="token function">onGreetingGenerated</span><span class="token punctuation">(</span>baseText <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> randomInt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>第二步</strong>定义视图接口，视图接口需要继承MvpView：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HelloWorldView</span> <span class="token keyword">extends</span> <span class="token class-name">MvpView</span><span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">showHello</span><span class="token punctuation">(</span>String greetingText<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">showGoodbye</span><span class="token punctuation">(</span>String greetingText<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>注意</strong>这里的MvpView是所有视图的顶层接口，它是一个空接口，没有定义任何方法。</p>
<p><strong>第三步</strong>实现Presenter，Presenter需要执行业务逻辑，并针对不同的执行结果调用视图的对应方法。<br>Presenter的顶层接口是MvpPresenter，它有两个方法：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MvpPresenter</span><span class="token operator">&lt;</span>V <span class="token keyword">extends</span> <span class="token class-name">MvpView</span><span class="token operator">></span> <span class="token punctuation">{</span>

  <span class="token comment" spellcheck="true">/**
   * 将View附着到Presenter上
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attachView</span><span class="token punctuation">(</span>V view<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">/**
   * 在视图被摧毁时调用。典型场景是Activity.onDestroy()和Fragment.onDestroyView()方法
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detachView</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> retainInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Mosby提供了MvpPresenter接口的基类实现，在这里我们继承MvpBasePresenter:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldPresenter</span> <span class="token keyword">extends</span> <span class="token class-name">MvpBasePresenter</span><span class="token operator">&lt;</span>HelloWorldView<span class="token operator">></span><span class="token punctuation">{</span>

    <span class="token keyword">private</span> GreetingGeneratorTask greetingTask<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cancelGreetingTaskIfRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>greetingTask <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>
            greetingTask<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greetHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">cancelGreetingTaskIfRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        greetingTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GreetingGeneratorTask</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">GreetingGeneratorTask<span class="token punctuation">.</span>GreetingTaskListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onGreetingGenerated</span><span class="token punctuation">(</span>String greetingText<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isViewAttached</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showHello</span><span class="token punctuation">(</span>greetingText<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        greetingTask<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detachView</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> retainInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">detachView</span><span class="token punctuation">(</span>retainInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>retainInstance<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">cancelGreetingTaskIfRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>注意</strong>在detachView方法中取消后台任务的处理。</p>
<p><strong>第四步</strong>实现Activity，让我们的Activity继承MvpActivity，并实现HelloWorldView接口。<br>MvpActivity有两个泛型，分别是Presenter和View的具体类型：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldActivity</span> <span class="token keyword">extends</span> <span class="token class-name">MvpActivity</span><span class="token operator">&lt;</span>HelloWorldView<span class="token punctuation">,</span> HelloWorldPresenter<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">HelloWorldView</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
<p>继承MvpActivity后，只有一个抽象方法createPresenter()需要实现：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> HelloWorldPresenter <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorldPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>HelloWorldView还有两个方法需要实现：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showHello</span><span class="token punctuation">(</span>String greetingText<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    greetingTextView<span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>
    greetingTextView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>greetingText<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showGoodbye</span><span class="token punctuation">(</span>String greetingText<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    greetingTextView<span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    greetingTextView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>greetingText<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
点击按钮后，使用Presenter来完成相关操作：
<span class="token annotation punctuation">@OnClick</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>helloButton<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onHelloButtonClicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    presenter<span class="token punctuation">.</span><span class="token function">greetHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@OnClick</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>goodbyeButton<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onGoodbyeButtonClicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    presenter<span class="token punctuation">.</span><span class="token function">greetGoodbye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="MvpPresenter的基类"><a href="#MvpPresenter的基类" class="headerlink" title="MvpPresenter的基类"></a>MvpPresenter的基类</h3><p><strong>Presenter默认实现一</strong>：使用弱引用保存视图引用，在调用getView()之前必须判断isViewAttached()。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MvpBasePresenter</span><span class="token operator">&lt;</span>V <span class="token keyword">extends</span> <span class="token class-name">MvpView</span><span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">MvpPresenter</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> WeakReference<span class="token operator">&lt;</span>V<span class="token operator">></span> viewRef<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attachView</span><span class="token punctuation">(</span>V view<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    viewRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span>V<span class="token operator">></span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">public</span> V <span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> viewRef <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> viewRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isViewAttached</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> viewRef <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> viewRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detachView</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> retainInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>viewRef <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      viewRef<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      viewRef <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>Presenter默认实现二</strong>：使用Null Object Pattern，在调用getView()时无需判断。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MvpNullObjectBasePresenter</span><span class="token operator">&lt;</span>V <span class="token keyword">extends</span> <span class="token class-name">MvpView</span><span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">MvpPresenter</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> V view<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attachView</span><span class="token punctuation">(</span>V view<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>view <span class="token operator">=</span> view<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@NonNull</span> <span class="token keyword">public</span> V <span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"MvpView reference is null. Have you called attachView()?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> view<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detachView</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> retainInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>

      Type<span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span>
          <span class="token punctuation">(</span><span class="token punctuation">(</span>ParameterizedType<span class="token punctuation">)</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getGenericSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      Class<span class="token operator">&lt;</span>V<span class="token operator">></span> viewClass <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>V<span class="token operator">></span><span class="token punctuation">)</span> types<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      view <span class="token operator">=</span> NoOp<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>viewClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p><strong>思考</strong>：什么是空对象模式(Null Object Pattern)？</p>
</blockquote>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="LCE视图"><a href="#LCE视图" class="headerlink" title="LCE视图"></a>LCE视图</h3><p>在开发Android应用过程中，我们会发现很多页面有相似的结构和UI逻辑，所以我们常常在写重复代码。如果能抽象出相似页面的View接口，然后封装页面的基类，就能让开发方便很多。Mosby就给我们提供了一个这样的视图模板，叫做<strong>LCE View</strong>。<br>LCE代表Loading-Content-Error(加载-内容-错误)，此视图有三种状态：显示加载中，显示数据内容，或者显示错误视图。例如在如下的场景中：<br>假设我们要在ListView中显示一个国家列表，国家列表的数据是从网络获取的，是一个耗时操作。在加载过程中，我们要显示一个ProgressBar，如果加载出错，我们要显示一条错误信息。另外，还要用SwipeRefreshLayout来让用户可以下拉刷新。<br>LCE View的接口定义如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MvpLceView</span><span class="token operator">&lt;</span>M<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">MvpView</span> <span class="token punctuation">{</span>

  <span class="token comment" spellcheck="true">/**
   * 显示加载视图，加载视图的id必须为R.id.loadingView
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> pullToRefresh<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">/**
   * 显示内容视图，内容视图的id必须为R.id.contentView
   *
   * &lt;b>The content view must have the id = R.id.contentView&lt;/b>
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">/**
   * 显示错误视图，错误视图必须是TextView，id必须是R.id.errorView
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> pullToRefresh<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">/**
   * 设置将在showContent()中显示的数据
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>M data<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">/**
   * 加载数据，此方法中常需要调用Presenter的对应方法。因此此方法不可在Presenter
   * 中使用，避免循环调用。
   * 参数pullToRefresh代表此次加载是否由下拉刷新触发。
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> pullToRefresh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p><strong>思考</strong>：LCE视图中考虑了下拉刷新，但没有考虑上拉加载，如果服务器是分页接口，需要添加上拉加载，应该怎样定义视图接口？</p>
</blockquote>
<h3 id="MvpLceActivity和MvpLceFragment"><a href="#MvpLceActivity和MvpLceFragment" class="headerlink" title="MvpLceActivity和MvpLceFragment"></a>MvpLceActivity和MvpLceFragment</h3><p>Mosby封装了LCE视图的基类，现在我们用MvpLceActivity或MvpLceFragment来实现上面所说的加载国家列表的场景。<br><strong>第一步</strong>完成界面布局，注意id必须使用上面指定的名称，错误视图只能是一个TextView：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FrameLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>
    <span class="token attr-name">......</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/loading_view<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@layout/error_view<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>android.support.v4.widget.SwipeRefreshLayout</span>
        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/contentView<span class="token punctuation">"</span></span>
        <span class="token attr-name">......</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView</span> <span class="token attr-name">......</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>android.support.v4.widget.SwipeRefreshLayout</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FrameLayout</span><span class="token punctuation">></span></span>
</code></pre>
<p><strong>第二步</strong>继承MvpLceView实现自己的视图接口，此处需要指定泛型，作为数据类型：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CountriesView</span> <span class="token keyword">extends</span> <span class="token class-name">MvpLceView</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Country<span class="token operator">>></span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre>
<p><strong>第三步</strong>实现Presenter，在这里我们做了一个接口和一个实现：</p>
<p>接口定义：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CountriesPresenter</span> <span class="token keyword">extends</span> <span class="token class-name">MvpPresenter</span><span class="token operator">&lt;</span>CountriesView<span class="token operator">></span><span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">loadCountries</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> pullToRefresh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>具体实现：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleCountriesPresenter</span> <span class="token keyword">extends</span> <span class="token class-name">MvpNullObjectBasePresenter</span><span class="token operator">&lt;</span>CountriesView<span class="token operator">></span>
        <span class="token keyword">implements</span> <span class="token class-name">CountriesPresenter</span><span class="token punctuation">{</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadCountries</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> pullToRefresh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showLoading</span><span class="token punctuation">(</span>pullToRefresh<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

        countriesLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountriesAsyncLoader</span><span class="token punctuation">(</span><span class="token operator">++</span>failingCounter <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CountriesAsyncLoader<span class="token punctuation">.</span>CountriesLoaderListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Country<span class="token operator">></span> countries<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> pullToRefresh<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        countriesLoader<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre>
<p>上面代码中就使用到了MvpLceView中除loadData()外的全部四个方法。<br><strong>第四步</strong>实现Activity或者Fragment，先以Activity为例，需要继承MvpLceActivity:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountriesActivity</span> <span class="token keyword">extends</span> <span class="token class-name">MvpLceActivity</span><span class="token operator">&lt;</span>SwipeRefreshLayout<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Country<span class="token operator">></span><span class="token punctuation">,</span> CountriesView<span class="token punctuation">,</span> CountriesPresenter<span class="token operator">></span>
        <span class="token keyword">implements</span> <span class="token class-name">SwipeRefreshLayout<span class="token punctuation">.</span>OnRefreshListener</span><span class="token punctuation">,</span> CountriesView<span class="token punctuation">{</span>
</code></pre>
<p><strong>MvpLceActivity</strong>中定义了四个泛型，分别是ContentView的类型，Data的类型，视图接口的类型和Presenter的类型。此处ContentView使用的是SwipeRefreshLayout。</p>
<p>继承<strong>MvpLceActivity</strong>后有两个方法需要实现：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> String <span class="token function">getErrorMessage</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> pullToRefresh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pullToRefresh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Error while loading countries"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"Error while loading countries. Click here to retry"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@NonNull</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> CountriesPresenter <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleCountriesPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>实现<strong>CountriesView</strong>接口后，重写如下几个方法：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Country<span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    adapter<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    adapter<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    adapter<span class="token punctuation">.</span><span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">showContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    contentView<span class="token punctuation">.</span><span class="token function">setRefreshing</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> pullToRefresh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">showError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> pullToRefresh<span class="token punctuation">)</span><span class="token punctuation">;</span>
    contentView<span class="token punctuation">.</span><span class="token function">setRefreshing</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> pullToRefresh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    presenter<span class="token punctuation">.</span><span class="token function">loadCountries</span><span class="token punctuation">(</span>pullToRefresh<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>实现<strong>OnRefreshListener</strong>接口后，需要实现一个方法：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>如果要用Fragment，方法基本上一样，只需继承MvpLceFragment，唯一的区别是，Activity的初始化在onCreate()中完成，Fragment的初始化在onViewCreated()中完成：<br>在Activity中：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>countries_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    contentView<span class="token punctuation">.</span><span class="token function">setOnRefreshListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayAdapter</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>simple_list_item_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    listView<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>在Fragment中：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onViewCreated</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onViewCreated</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span>

    contentView<span class="token punctuation">.</span><span class="token function">setOnRefreshListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    contentView<span class="token punctuation">.</span><span class="token function">setOnRefreshListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayAdapter</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>simple_list_item_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    listView<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="ViewState简介"><a href="#ViewState简介" class="headerlink" title="ViewState简介"></a>ViewState简介</h3><p>在Android开发中有一个很麻烦的问题，就是在界面被销毁、被重建的过程中保存和恢复视图状态。界面被系统回收和重建常常发生在这两个场景中：</p>
<ul>
<li>Configuration变化，例如屏幕在横竖屏之间切换，语言环境变化等。</li>
<li>界面切到后台(例如用户按Home键)，Android在内存过低时自动回收此Activity，在界面重新显示时重建Activity。</li>
</ul>
<blockquote>
<p><strong>思考</strong>：两种Activity被回收和重建的场景，有什么区别？</p>
</blockquote>
<p>Mosby提供了一个ViewState特性来解决这一问题。ViewState是一个接口，只有一个apply方法：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ViewState</span><span class="token operator">&lt;</span>V <span class="token keyword">extends</span> <span class="token class-name">MvpView</span><span class="token operator">></span> <span class="token punctuation">{</span>

  <span class="token comment" spellcheck="true">/**
   * Called to apply this viewstate on a given view.
   *
   * @param view The {@link MvpView}
   * @param retained true, if the components like the viewstate and the presenter have been
   * retained
   * because the {@link Fragment#setRetainInstance(boolean)} has been set to true
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span>V view<span class="token punctuation">,</span> <span class="token keyword">boolean</span> retained<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>例如，上面讲过的MvpLceFragment，如果想在横竖屏切换过程中保存和恢复视图状态，只需改成继承MvpLceViewStateFragment，实现如下一个方法即可：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> LceViewState<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Country<span class="token operator">></span><span class="token punctuation">,</span> CountriesView<span class="token operator">></span> <span class="token function">createViewState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setRetainInstance</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RetainingLceViewState</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这是针对Mosby提供的LceView的ViewState，如果是我们的自定义视图，也可以实现自己的ViewState。整个ViewState特性的实现原理和应用方法比较复杂，这里不做过多介绍。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul>
<li>MVC，MVP和MVVM之间有什么区别和联系？</li>
<li>什么是委托模式？委托和继承的区别是什么？使用委托有什么好处？</li>
<li><p>什么是library？什么是framework？它们的区别是什么？</p>
<blockquote>
<p><strong>提示</strong>：library和framework的关键区别是“控制反转”(Inversion of Control)。当你调用library中的方法时，你掌握控制权。但使用framework时，控制是倒转的：由framework来调用你的代码。<br><img src="http://ovmzdfex7.bkt.clouddn.com/17-9-2/18695493.jpg" alt=""></p>
</blockquote>
</li>
<li><p>什么是空对象模式(Null Object Pattern)？</p>
</li>
<li>LCE视图中考虑了下拉刷新，但没有考虑上拉加载，如果服务器是分页接口，需要添加上拉加载，应该怎样定义视图接口？</li>
<li>两种Activity被回收和重建的场景，有什么区别？<blockquote>
<p><strong>提示</strong>：参考下面两个方法：<br>Fragmemt.setRetainInstance(boolean retain)<br>Activity.onRetainNonConfigurationInstance()</p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开源库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gson使用]]></title>
      <url>/2016/05/25/%E5%BC%80%E6%BA%90%E5%BA%93_Gson%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>Android中Gson的使用</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Gson是一个Java库，作用是将Java对象转换成它对应的JSON表示。<br>开源的JSON解析库有好几个，例如Jackson就是一个很有名的XML/JSON解析库。Gson与这些库的不同之处，表现在它的两个重要设计目标：</p>
<ul>
<li>即使你无法修改源代码，你也能通过Gson对代码中的类做解析和变换。</li>
<li>充分支持Java泛型。</li>
</ul>
<p>在学习过程中我们能发现，第一点很好理解，并且也简化了对Gson的使用；而第二点对泛型的支持，则是掌握Gson框架的一个难点。</p>
<p>下图是Gson的设计目标：<br><img src="http://ovmzdfex7.bkt.clouddn.com/17-9-2/15577787.jpg" alt=""></p>
<p>其中功能性是难点，也比较不好理解，先重点掌握Gson的基本使用方式即可。</p>
<h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p>Gson的基本使用是非常简单的。<br>首先在Android Studio项目中添加对Gson库的依赖：</p>
<pre><code>compile &#39;com.google.code.gson:gson:2.6.2&#39;
</code></pre><h2 id="简单回顾Json"><a href="#简单回顾Json" class="headerlink" title="简单回顾Json"></a>简单回顾Json</h2><p>在正式开始使用Gson之前，先来简单回顾一下JSON的基础知识。<br>JSON是一种轻量级的数据交换格式，它主要有两种结构：<br>键值对的集合，对应于其它编程语言中的对象(例如Java)、struct(例如C)、Hash(例如Ruby)、字典(例如Python)等。<br>无序的值列表，对应于编程语言中的数据结构：数组、矢量、列表等。<br>注意JSON使用的这两种数据结构的简洁性，它们是不同编程语言之间通用的，这赋予了JSON连接不同编程语言的能力。<br>JSON中主要有5种数据形式：</p>
<ul>
<li>number，例如10</li>
<li>string，例如“abcd”</li>
<li>value，value可以是上面的number和String，也可以是下面的object和array，value的概念赋予了JSON嵌套表示的能力。value还包括三个特殊值：true，false和null。</li>
<li>array，形如 [value, value, … value] 的列表形式。</li>
<li>object，形如 {string:value, string:value, … string:value} 的键值对形式。</li>
</ul>
<h2 id="使用Gson"><a href="#使用Gson" class="headerlink" title="使用Gson"></a>使用Gson</h2><p>Gson库的关键类就是Gson，使用起来很简单，直接实例化 new Gson() 即可。它也可以通过GsonBuilder 类来实例化，进行一些初始化设置，初学时无需深入了解。<br><strong>Gson实例是无状态的</strong>。所以多个JSON序列化和反序列操作完全可以重用一个Gson对象。</p>
<h3 id="基本序列化方法"><a href="#基本序列化方法" class="headerlink" title="基本序列化方法"></a>基本序列化方法</h3><p>序列化是指将Java对象转换成JSON字符串，使用Gson.toJson(…)方法来进行序列化操作。举几个基本的序列化例子：</p>
<ul>
<li>number:<pre class=" language-java"><code class="language-java">Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// ==> 1</span>
gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ==> 10</span>
</code></pre>
</li>
<li>string:<pre class=" language-java"><code class="language-java">gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// ==> "abcd"</span>
</code></pre>
</li>
<li>value:<pre class=" language-java"><code class="language-java">gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// ==> true</span>
</code></pre>
</li>
<li>object:<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">BagOfPrimitives</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> value1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> String value2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> value3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token function">BagOfPrimitives</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// no-args constructor</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// Serialization</span>
BagOfPrimitives obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BagOfPrimitives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
String json <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment" spellcheck="true">// ==> json is {"value1":1,"value2":"abc"}</span>
</code></pre>
</li>
<li>array:<pre class=" language-java"><code class="language-java">Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
String<span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">,</span> <span class="token string">"ghi"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// Serialization</span>
gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// ==> [1,2,3,4,5]</span>
gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ==> ["abc", "def", "ghi"]</span>
</code></pre>
</li>
</ul>
<h3 id="基本反序列化方法"><a href="#基本反序列化方法" class="headerlink" title="基本反序列化方法"></a>基本反序列化方法</h3><p>反序列化是指将JSON字符串传换成Java对象，使用Gson.fromJson(…)方法来进行反序列化操作。反序列化和序列化不同的一点是，你需要告诉Gson目标对象的类型是什么。举几个基本的反序列化例子：</p>
<ul>
<li>number:<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> one <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Long one <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li>string:<pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"\"abc\""</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li>value:<pre class=" language-java"><code class="language-java">Boolean f <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li>object:<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">BagOfPrimitives</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> value1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> String value2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> value3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token function">BagOfPrimitives</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// no-args constructor</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
String json <span class="token operator">=</span> <span class="token string">"{"</span>value1<span class="token string">":1,"</span>value2<span class="token string">":"</span>abc<span class="token string">"}"</span><span class="token punctuation">;</span>  
BagOfPrimitives obj2 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> BagOfPrimitives<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
<li>array:<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints2 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token string">"[1,2,3,4,5]"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment" spellcheck="true">// ==> ints2 和 ints 相同。</span>
</code></pre>
</li>
</ul>
<h3 id="序列化和反序列化中的注意点"><a href="#序列化和反序列化中的注意点" class="headerlink" title="序列化和反序列化中的注意点"></a>序列化和反序列化中的注意点</h3><ul>
<li>对象的字段可以并推荐使用private。</li>
<li>无需使用注解指定哪些字段被包括在序列化和反序列化操作中。当前类，和它所有父类的所有字段都是默认包括的。</li>
<li>如果字段使用transient修饰，它被默认忽略，不包含在序列化和反序列化操作中。</li>
<li>Gson可以正确处理null值。</li>
<li>序列化时，值为null的字段会被跳过。</li>
<li>反序列化时，JSON中缺失的项，其对象对应的字段会被设为null。</li>
<li>内部类、匿名类等隐含的外部类的字段会被忽略，不包含在序列化和反序列化中。</li>
</ul>
<h2 id="Gson的进阶使用"><a href="#Gson的进阶使用" class="headerlink" title="Gson的进阶使用"></a>Gson的进阶使用</h2><h3 id="修改字段名"><a href="#修改字段名" class="headerlink" title="修改字段名"></a>修改字段名</h3><p>从上面的例子可以看出来，在序列化和反序列化时，字段名直接用来作为键值对中的key。有时，对象和它的JSON表示命名并不完全一致，这时就需要修改字段名，有两种方法：<br>使用@SerializeName注解自定义字段名；<br>使用FieldNamingPolicy来规定基本的命名策略；<br>例如：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">SomeObject</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"custom_naming"</span><span class="token punctuation">)</span> 
  <span class="token keyword">private</span> <span class="token keyword">final</span> String someField<span class="token punctuation">;</span>

  <span class="token keyword">private</span> <span class="token keyword">final</span> String someOtherField<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">SomeObject</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span> String b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>someField <span class="token operator">=</span> a<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>someOtherField <span class="token operator">=</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

SomeObject someObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeObject</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span> <span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFieldNamingPolicy</span><span class="token punctuation">(</span>FieldNamingPolicy<span class="token punctuation">.</span>UPPER_CAMEL_CASE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
String jsonRepresentation <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>someObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonRepresentation<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>结果将是</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"custom_naming"</span><span class="token operator">:</span><span class="token string">"first"</span><span class="token punctuation">,</span><span class="token property">"SomeOtherField"</span><span class="token operator">:</span><span class="token string">"second"</span><span class="token punctuation">}</span>
</code></pre>
<h3 id="嵌套类-例如内部类-的情况"><a href="#嵌套类-例如内部类-的情况" class="headerlink" title="嵌套类(例如内部类)的情况"></a>嵌套类(例如内部类)的情况</h3><p>对于静态内部类，Gson可以直接处理。<br>对于非静态内部类，Gson不能自动反序列化，因为即使是非静态内部类的无参构造器，也需要一个外部类的引用，这在反序列化期间是做不到的。要解决这个问题，你要么将内部类声明为静态，要么提供一个自定义的InstanceCreator。例如：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> 
  <span class="token keyword">public</span> String a<span class="token punctuation">;</span> 

  <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span> 

    <span class="token keyword">public</span> String b<span class="token punctuation">;</span> 

    <span class="token keyword">public</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// No args constructor for B</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>注意：默认情况下，B类不能用Gson序列化。</p>
</blockquote>
<p>Gson不能讲{“b”：”abc”}反序列化成B的对象，除非将B定义成静态的。另一个解决方法是写一个自定义的InstanceCreator：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstanceCreatorForB</span> <span class="token keyword">implements</span> <span class="token class-name">InstanceCreator</span><span class="token operator">&lt;</span>A<span class="token punctuation">.</span>B<span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> A a<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token function">InstanceCreatorForB</span><span class="token punctuation">(</span>A a<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> A<span class="token punctuation">.</span>B <span class="token function">createInstance</span><span class="token punctuation">(</span>Type type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>这是可行的，但不推荐这样来用。</p>
<h3 id="集合的情况"><a href="#集合的情况" class="headerlink" title="集合的情况"></a>集合的情况</h3><p>Gson对集合的处理方式比较丑陋，这是由于Java泛型机制决定的，没有更好的解决办法：</p>
<pre class=" language-java"><code class="language-java">Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Collection<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ints <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">immutableList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// Serialization</span>
String json <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ==> json is [1,2,3,4,5]</span>

<span class="token comment" spellcheck="true">// Deserialization</span>
Type collectionType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token operator">&lt;</span>Collection<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Collection<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ints2 <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> collectionType<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// ==> ints2 和 ints 相同。</span>
</code></pre>
<p>如果集合中存储的是任意类型的对象，Gson可以序列化它，但不能做反序列化，这是因为用户无法指明集合中每一个对象的类型。在反序列化时，集合必须是一个明确的类型。如果遵循良好的Java编程规范，这基本不会造成什么问题。</p>
<h3 id="泛型的处理"><a href="#泛型的处理" class="headerlink" title="泛型的处理"></a>泛型的处理</h3><p>泛型的处理和上面集合的处理类似，因为集合定义中使用的就是泛型。<br>当你调用toJson(obj)方法时，Gson使用obj.getClass()来获取类属性信息，来序列化它。类似的，通常你可以将MyClass.class对象传递给fromJson(json, MyClass.class)方法，来反序列化。如果对象不包含泛型，这种方法是可行的，但是，如果对象是一个泛型类型，由于Java的类型擦除(Type Erasure)机制，该泛型的信息会丢失，例如：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>
  T value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Foo<span class="token operator">&lt;</span>Bar<span class="token operator">></span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token operator">&lt;</span>Bar<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可能无法正确序列化foo.value。</span>

gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> foo<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不会将 foo.value 正确反序列化成Bar对象</span>
</code></pre>
<p>要解决这一问题，你需要指明你的泛型类型的类型参数(parameterized type)，使用集合的例子中看到过的TypeToken类：</p>
<pre class=" language-java"><code class="language-java">Type fooType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token operator">&lt;</span>Foo<span class="token operator">&lt;</span>Bar<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> fooType<span class="token punctuation">)</span><span class="token punctuation">;</span>

gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> fooType<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>初步使用Gson时，可以不必深究这一泛型处理的实现原理，知道怎么做即可。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开源库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OkHttp使用]]></title>
      <url>/2016/05/09/%E5%BC%80%E6%BA%90%E5%BA%93_OkHttp%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>Android中OkHttp的使用</p>
<p><a href="https://github.com/square/okhttp" target="_blank" rel="external">官方网站</a> | <a href="https://github.com/square/okhttp/wiki/Recipes" target="_blank" rel="external">Javadoc</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>OkHttp是<a href="https://github.com/square" target="_blank" rel="external">Square</a>出的Http通讯库，支持HTTP和HTTP/2，用于Android应用和Java应用。<br>OkHttp是非常优秀的Http通讯库，将Http连接中各种繁杂的问题，对并发的支持，对常见异常的处理等封装在底层，提供简单易用的API供应用中调用。与之相比，HttpUrlConnection的使用过于复杂，Appache的HttpClient在Android平台上的运行又有各种问题，在Android 6.0之后，已经将HttpClient库从SDK中删除，全面转向使用OkHttp。<br>目前有很多知名的Android三方框架都使用OkHttp作为网络连接的默认基栈，例如Volley，Glide，Retrofit等，从中也能看出学习OkHttp的必要性。</p>
<h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><h3 id="项目中添加对OkHttp的依赖"><a href="#项目中添加对OkHttp的依赖" class="headerlink" title="项目中添加对OkHttp的依赖"></a>项目中添加对OkHttp的依赖</h3><p>在需要使用OkHttp的模块的build.gradle文件中，添加如下依赖：(版本号可能变更)<br>    compile ‘com.squareup.okhttp3:okhttp:3.2.0’</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>OkHttp框架的核心类是OkHttpClient，此类可直接实例化。由于OkHttpClient内部处理了并发，多线程和Socket重用等问题，为了节省资源，整个应用中使用一个OkHttpClient对象即可，可以对它做Singleton封装。</p>
<pre class=" language-java"><code class="language-java">OkHttpClient okHttpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="Http请求的构建"><a href="#Http请求的构建" class="headerlink" title="Http请求的构建"></a>Http请求的构建</h3><p>代表Http请求的类是Request，该类使用构造器模式，最简单的构造GET请求如下：</p>
<pre class=" language-java"><code class="language-java">Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>要构造Post请求，在构建Request时增加请求体即可：</p>
<pre class=" language-java"><code class="language-java">RequestBody formBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormEncodingBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Cuber"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"26"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>RequestBody<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="Http请求的发送"><a href="#Http请求的发送" class="headerlink" title="Http请求的发送"></a>Http请求的发送</h3><p>请求的发送有两种形式，一种是直接同步执行，阻塞调用线程，直接返回结果；另一种是通过队列异步执行，不阻塞调用线程，通过回调方法返回结果。如下所示：</p>
<p>同步执行：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 如果返回null，代表超时或没有网络连接</span>
Response response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>异步回调：</p>
<pre class=" language-java"><code class="language-java">Response response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//超时或没有网络连接</span>
        <span class="token comment" spellcheck="true">//注意：这里是后台线程！</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Response response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//成功</span>
        <span class="token comment" spellcheck="true">//注意：这里是后台线程！</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>以上这些就是快速上手OkHttp需要知道的全部内容，可以从中看出，它的API非常简单易用。</p>
<h2 id="Call模型"><a href="#Call模型" class="headerlink" title="Call模型"></a>Call模型</h2><p>Http客户端的任务是处理请求和响应，这说起来简单，但实际过程很复杂。</p>
<ul>
<li>请求：Http请求包含一个URL，请求方法(例如GET或者POST)，请求头。还可能包含请求体，可以是数据流也可以是指定的内容类别。</li>
<li>响应：用一个响应码来回应请求(例如200代表成功，404代表页面未找到)，响应头和响应体。</li>
</ul>
<h3 id="请求的重写"><a href="#请求的重写" class="headerlink" title="请求的重写"></a>请求的重写</h3><p>为了保证正确性和传输效率，OkHttp会在发送你的请求之前重写它，例如：<br>OkHttp可能会添加原始请求中缺失的头信息，包括Content-Length, Transfer-Encoding, User-Agent, Host, Connection, 和 Content-Type。<br>为了实现透明的响应压缩(transparent response compression)，OkHttp会增加Accept-Encoding头信息。<br>如果你收到了cookie，OkHttp会增加Cookie头信息。<br>某些请求可能会对响应做缓存。如果被缓存的响应不是最新的，OkHttp能做一个有条件的GET请求来下载更新后的响应。此功能需要添加If-Modified-Since和If-None-Match等头信息。</p>
<h3 id="响应的重写"><a href="#响应的重写" class="headerlink" title="响应的重写"></a>响应的重写</h3><p>如果使用了透明压缩，OkHttp会去掉对应响应的Content-Encoding和Content-Length头信息，因为它们不能应用于解压后的响应体。<br>如果有条件的GET成功了，网络侧的响应和缓存的响应会被自动合并。</p>
<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>如果你请求的URL被移动了，服务器会返回类似于302这样的响应码，来指明新的URL。OkHttp能跟随新的URL，获取到最终的响应。</p>
<h3 id="请求的重试"><a href="#请求的重试" class="headerlink" title="请求的重试"></a>请求的重试</h3><p>有时会发生连接失败：可能网络连接状况不好，或者服务器不可达。OkHttp会自动使用不同的路由来重试请求。</p>
<h3 id="Call模型-1"><a href="#Call模型-1" class="headerlink" title="Call模型"></a>Call模型</h3><p>由于以上的重写，重定向和重试等操作，你的一个简单请求可能会产生多个请求和响应。OkHttp使用Call这一概念对此来建模：不论为了满足你的请求任务，中间做了多少次请求和响应，都算作一个Call。<br><strong>Call</strong>有两种方式来执行：</p>
<ul>
<li>同步方式：你的线程会被阻塞，知道响应可读。</li>
<li>异步方式：你在任意线程将请求排队，当响应可读时，会在另一个线程拿到回调。</li>
</ul>
<p>Call可以在任意线程取消，如果请求没有完成，调用取消方法会导致请求失败，读写请求体和响应体的代码会产生IOException。</p>
<h3 id="Call的分派"><a href="#Call的分派" class="headerlink" title="Call的分派"></a>Call的分派</h3><p>对于同步调用，你自己需要负责对线程和并发请求的管理。太多的同时存在的连接会浪费资源，太少则会影响延迟性能。<br>对于异步调用，Dispatcher实现了对最大并发请求数的管理。你可以设置最大的单服务器并发数(默认是5)，和最大的总并发数(默认是64)。</p>
<h2 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h2><p>以下是一些简单的代码样例，用来阐明如何用OkHttp解决常见问题。</p>
<h3 id="同步Get请求"><a href="#同步Get请求" class="headerlink" title="同步Get请求"></a>同步Get请求</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
    Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"http://publicobject.com/helloworld.txt"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 下载文件</span>
    Response response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Unexpected code "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 打印响应的头信息</span>
    Headers responseHeaders <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> responseHeaders<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>responseHeaders<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> responseHeaders<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 将文件内容作为字符串输出</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>响应体的string()方法对于小文件来说非常方便和高效，但如果响应体较大(例如大于1M)，要避免使用这一方法，因为它会将文件内容全部加载在内存上。在这种情况下，使用流来处理响应体。</p>
<h3 id="异步Get请求"><a href="#异步Get请求" class="headerlink" title="异步Get请求"></a>异步Get请求</h3><p>下载一个文件，当响应可读时获得回调。具体收到回调的时间是当响应头准备好时，读取响应体仍然可能会阻塞。当前OkHttp没有提供异步API来接受响应体的各部分。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
    Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"http://publicobject.com/helloworld.txt"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> IOException throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Response response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Unexpected code "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

            Headers responseHeaders <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> responseHeaders<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>responseHeaders<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> responseHeaders<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="获取头信息"><a href="#获取头信息" class="headerlink" title="获取头信息"></a>获取头信息</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
    Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://api.github.com/repos/square/okhttp/issues"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> <span class="token string">"OkHttp Headers.java"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span> <span class="token string">"application/json; q=0.5"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span> <span class="token string">"application/vnd.github.v3+json"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Response response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Unexpected code "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server: "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Server"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Date: "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Date"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Vary: "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token string">"Vary"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="Post字符串"><a href="#Post字符串" class="headerlink" title="Post字符串"></a>Post字符串</h3><p>以下的例子显示了如何Post一个字符串给服务器，同样，不要使用此API传送大文件(&gt; 1M)。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
    String postBody <span class="token operator">=</span> <span class="token string">""</span>
            <span class="token operator">+</span> <span class="token string">"Releases\n"</span>
            <span class="token operator">+</span> <span class="token string">"--------\n"</span>
            <span class="token operator">+</span> <span class="token string">"\n"</span>
            <span class="token operator">+</span> <span class="token string">" * _1.0_ May 6, 2013\n"</span>
            <span class="token operator">+</span> <span class="token string">" * _1.1_ June 15, 2013\n"</span>
            <span class="token operator">+</span> <span class="token string">" * _1.2_ August 11, 2013\n"</span><span class="token punctuation">;</span>

    Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://api.github.com/markdown/raw"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>RequestBody<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>MEDIA_TYPE_MARKDOWN<span class="token punctuation">,</span> postBody<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Response response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Unexpected code "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="Post流"><a href="#Post流" class="headerlink" title="Post流"></a>Post流</h3><p>下面的例子使用了Okio的buffered sink。如果想使用OutputStream，可以通过<br>BufferedSink.outputStream()方法。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> MediaType MEDIA_TYPE_MARKDOWN
        <span class="token operator">=</span> MediaType<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"text/x-markdown; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> MediaType MEDIA_TYPE_MARKDOWN
        <span class="token operator">=</span> MediaType<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"text/x-markdown; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">final</span> OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
    RequestBody requestBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> MediaType <span class="token function">contentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> MEDIA_TYPE_MARKDOWN<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeTo</span><span class="token punctuation">(</span>BufferedSink sink<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
            sink<span class="token punctuation">.</span><span class="token function">writeUtf8</span><span class="token punctuation">(</span><span class="token string">"Numbers\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sink<span class="token punctuation">.</span><span class="token function">writeUtf8</span><span class="token punctuation">(</span><span class="token string">"-------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">997</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sink<span class="token punctuation">.</span><span class="token function">writeUtf8</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">" * %s = %s\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">factor</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> String <span class="token function">factor</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> x <span class="token operator">=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">factor</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" × "</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://api.github.com/markdown/raw"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Response response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Unexpected code "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="Post文件"><a href="#Post文件" class="headerlink" title="Post文件"></a>Post文件</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> MediaType MEDIA_TYPE_MARKDOWN
        <span class="token operator">=</span> MediaType<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"text/x-markdown; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">final</span> OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"README.md"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://api.github.com/markdown/raw"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>RequestBody<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>MEDIA_TYPE_MARKDOWN<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Response response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Unexpected code "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="Post-form参数"><a href="#Post-form参数" class="headerlink" title="Post form参数"></a>Post form参数</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
    RequestBody formBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormBody<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"search"</span><span class="token punctuation">,</span> <span class="token string">"Jurassic Park"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://en.wikipedia.org/w/index.php"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>formBody<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Response response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Unexpected code "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="Post多部分请求"><a href="#Post多部分请求" class="headerlink" title="Post多部分请求"></a>Post多部分请求</h3><p>MultipartBody.Builder可以构建复杂的请求体，多部分请求体的每一个部分都是一个单一的请求体，可以定义它自身的请求头。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String IMGUR_CLIENT_ID <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> MediaType MEDIA_TYPE_PNG <span class="token operator">=</span> MediaType<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"image/png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">final</span> OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image</span>
    RequestBody requestBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultipartBody<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>MultipartBody<span class="token punctuation">.</span>FORM<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">addFormDataPart</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"Square Logo"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">addFormDataPart</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span> <span class="token string">"logo-square.png"</span><span class="token punctuation">,</span>
                    RequestBody<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>MEDIA_TYPE_PNG<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"website/static/logo-square.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">,</span> <span class="token string">"Client-ID "</span> <span class="token operator">+</span> IMGUR_CLIENT_ID<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://api.imgur.com/3/image"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Response response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Unexpected code "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="使用Gson来解析JSON响应"><a href="#使用Gson来解析JSON响应" class="headerlink" title="使用Gson来解析JSON响应"></a>使用Gson来解析JSON响应</h3><p>以下代码使用Gson库来解析服务器响应的JSON信息，注意ResponseBody.charStream()方法使用响应头中的Content-Type字段来选择使用何种字符集，如果没有指明，默认将使用UTF-8。</p>
<blockquote>
<p>Gson的依赖<br>compile ‘com.google.code.gson:gson:2.6.2’</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
    Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://api.github.com/gists/c2a7c39532239ff261be"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Response response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Unexpected code "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Gist gist <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Gist<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> GistFile<span class="token operator">></span> entry <span class="token operator">:</span> gist<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Gist</span> <span class="token punctuation">{</span>
    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> GistFile<span class="token operator">></span> files<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">GistFile</span> <span class="token punctuation">{</span>
    String content<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="Call的取消"><a href="#Call的取消" class="headerlink" title="Call的取消"></a>Call的取消</h3><p>使用Call.cancel()来停止一个执行中的请求。如果线程正在写请求或读响应，则会收到IOException。使用此方法，在一个Call已经不需要时取消它，可以节省网络流量。</p>
<h2 id="更多内容"><a href="#更多内容" class="headerlink" title="更多内容"></a>更多内容</h2><p>以上是对OkHttp的基本了解，更多内容包括：</p>
<ul>
<li>处理鉴权和Cookie。</li>
<li>使用HTTPS。</li>
<li>使用拦截器。</li>
<li>等等…</li>
</ul>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p><strong>OkHttp如何设置超时？</strong></p>
<p>设置超时的方法很简单：</p>
<pre class=" language-java"><code class="language-java">OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 连接超时</span>
    <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Socket写超时</span>
    <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// Socket读超时</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>注意readTimeout和writeTimeout被用于OkHttp内部的Connection类，用在setSoTimeout方法上来设置Socket。<br>另外，在2.5.0版本之后，读、写、连接超时的默认值是10s。</p>
<p><strong>OkHttp是否支持自签名SSL证书？</strong></p>
<p>支持，需要自定义javax.net.ssl.SSLSocketFactory实例，传给OkHttpClient.setSslSocketFactory(SSLSocketFactory sslSocketFactory)方法。可以使用来自你自己Keystore的证书。</p>
<p><strong>OkHttp中，Callback的回调方法onFailure和onResponse是在主线程执行码？</strong></p>
<p>不是，OkHttp是一个Java库，不是Android库，它对Android主线程一无所知，所以这两个回调方法自然是在后台线程执行。实际开发中，常常对OkHttp做二次封装，来直接将结果传递给主线程。</p>
<p><strong>在OkHttp中可以禁止自动重定向吗？</strong></p>
<p>在2.3.0版本中提供了设置的方法：<br>final OkHttpClient client = new OkHttpClient();<br>client.setFollowRedirects(false);<br>但在3.x版本中这一方法不存在了，所以暂时没有简单的方法来直接禁止自动重定向。</p>
<p><strong>OKHttp既有同步api也有异步api，考虑下面两种方法来实现异步请求，有什么区别？哪一种更好？</strong></p>
<ol>
<li>使用AsyncTask和OKhttp同步api；</li>
<li>直接使用OKHttp异步api；</li>
</ol>
<p>这两种方法区别很大！<br>为了HTTP请求而使用AsyncTask，在Android中是很糟糕的做法。它会造成很多缺陷，最好避免这样做。例如，你无法在执行期间撤销一 个请求。另外，AsyncTask的使用模式常常会泄露Activity的引用，这是Android开发中容易引起内存泄漏的罪魁祸首之一。</p>
<p>OKHttp的异步方法从多个方面来讲都优越得多：</p>
<ol>
<li>异步api支持本地撤销请求。如果请求是在连接过程中，Callback的引用会被释放，不会再被调用；如果请求还没有开始，则不会被执行。如果你使用的是HTTP/2或者SPDY协议，我们就能实质上的在请求过程中撤销它，节省流量和电量。</li>
<li>异步api支持给多个请求添加标记，并在一个方法中撤销全部被标记的请求。例如，在一个Activity中做出的所有请求，都可以用该Activity的实例做标记。然后，在onPause或onStop方法中，你可以撤销所有用该Activity实例标记的请求。<br>3.如果你在使用HTTP/2或者SPDY，多个请求或者响应是复用单一连接传输到服务器的，在这种情况下，使用异步调用机制比阻塞的方式要高效得多。所以，如果可以，尽量使用Call.enqueue！</li>
</ol>
<p>更多问题见<a href="https://stackoverflow.com/questions/tagged/okhttp?sort=active" target="_blank" rel="external">stackoverflow(翻墙)</a>。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开源库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EventBus使用二-进阶]]></title>
      <url>/2016/04/15/%E5%BC%80%E6%BA%90%E5%BA%93_EventBus%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>Android中EventBus的进阶使用</p>
<p><a href="../../10/开源库_EventBus基础使用/index.html"><strong>EventBus使用一-基础</strong></a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>前一篇给大家简单演示了EventBus的onEventMainThread（）函数的接收，其实EventBus还有另外不同的函数，他们分别是：</p>
<ol>
<li>onEvent</li>
<li>onEventMainThread</li>
<li>onEventBackgroundThread</li>
<li>onEventAsync</li>
</ol>
<p>这四种订阅函数都是使用onEvent开头的，它们的功能稍有不同,在介绍不同之前先介绍两个概念： 告知观察者事件发生时通过EventBus.post函数实现，这个过程叫做事件的发布，观察者被告知事件发生叫做事件的接收，是通过下面的订阅函数实现的。</p>
<p><strong>1、onEvent</strong>:如果使用onEvent作为订阅函数，那么该事件在哪个线程发布出来的，onEvent就会在这个线程中运行，也就是说发布事件和 接收事件线程在同一个线程。使用这个方法时，在onEvent方法中不能执行耗时操作，如果执行耗时操作容易导致事件分发延迟。<br><strong>2、onEventMainThread</strong>:如果使用onEventMainThread作为订阅函数，那么不论事件是在哪个线程中发布出来 的，onEventMainThread都会在UI线程中执行，接收事件就会在UI线程中运行，这个在Android中是非常有用的，因为在 Android中只能在UI线程中跟新UI，所以在onEvnetMainThread方法中是不能执行耗时操作的。<br><strong>3、onEventBackground</strong>:如果使用onEventBackgrond作为订阅函数，那么如果事件是在UI线程中发布出来的，那么 onEventBackground就会在子线程中运行，如果事件本来就是子线程中发布出来的，那么onEventBackground函数直接在该子线 程中执行。<br><strong>4、onEventAsync</strong>：使用这个函数作为订阅函数，那么无论事件在哪个线程发布，都会创建新的子线程在执行onEventAsync.</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>上面列出的这四个函数，关键问题在于，我们怎么指定调用哪个函数呢？<br>我们先研究一下，上一篇中是怎么调用的onEventMainThread函数，除了在接收端注册与反注册以后，关键问题在于新建的一个类：<br>新建一个类：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>other<span class="token punctuation">;</span>  

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstEvent</span> <span class="token punctuation">{</span>  

    <span class="token keyword">private</span> String mMsg<span class="token punctuation">;</span>  
    <span class="token keyword">public</span> <span class="token function">FirstEvent</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub  </span>
        mMsg <span class="token operator">=</span> msg<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token keyword">return</span> mMsg<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre>
<p>发送时：</p>
<pre class=" language-java"><code class="language-java">EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FirstEvent</span><span class="token punctuation">(</span><span class="token string">"FirstEvent btn clicked"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>接收时：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEventMainThread</span><span class="token punctuation">(</span>FirstEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    ……  
<span class="token punctuation">}</span>
</code></pre>
<p>发现什么问题了没？<br>没错，发送时发送的是这个类的实例，接收时参数就是这个类实例。<br>所以！！！！！！当发过来一个消息的时候，EventBus怎么知道要调哪个函数呢，就看哪个函数传进去的参数是这个类的实例，哪个是就调哪个。那如果有两个是呢，那两个都会被调用！！！！<br>为了证明这个问题，下面写个例子，先看下效果</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>先看看我们要实现的效果：<br>这次我们在上一篇的基础上，新建三个类：FirstEvent、SecondEvent、ThirdEvent,在第二个Activity中发送请求，在MainActivity中接收这三个类的实例，接收时的代码为：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEventMainThread</span><span class="token punctuation">(</span>FirstEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    
    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"harvic"</span><span class="token punctuation">,</span> <span class="token string">"onEventMainThread收到了消息："</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEventMainThread</span><span class="token punctuation">(</span>SecondEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"harvic"</span><span class="token punctuation">,</span> <span class="token string">"onEventMainThread收到了消息："</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span>ThirdEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"harvic"</span><span class="token punctuation">,</span> <span class="token string">"OnEvent收到了消息："</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre>
<p>使用两个onEventMainThread分别接收FirstEvent实例的消息和SecondEvent实例的消息，使用onEvent接收ThirdEvent实例的消息。界面操作及结果如下：</p>
<p><img src="http://ovmzdfex7.bkt.clouddn.com/17-9-2/69067633.jpg" alt=""></p>
<p>Log输出结果：</p>
<p><img src="http://ovmzdfex7.bkt.clouddn.com/17-9-2/78813619.jpg" alt=""></p>
<p>可以看到，在发送FirstEvent时，在MainActiviy中虽然有三个函数，但只有第一个onEventMainThread函数的接收 参数是FirstEvent，所以会传到它这来接收。所以这里识别调用EventBus中四个函数中哪个函数，是通过参数中的实例来决定的。</p>
<h3 id="三个类"><a href="#三个类" class="headerlink" title="三个类"></a>三个类</h3><p>1.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>other<span class="token punctuation">;</span>  

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstEvent</span> <span class="token punctuation">{</span>  
    <span class="token keyword">private</span> String mMsg<span class="token punctuation">;</span>  
    <span class="token keyword">public</span> <span class="token function">FirstEvent</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub  </span>
        mMsg <span class="token operator">=</span> msg<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token keyword">return</span> mMsg<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre>
<p>2.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>other<span class="token punctuation">;</span>  

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondEvent</span><span class="token punctuation">{</span>  

    <span class="token keyword">private</span> String mMsg<span class="token punctuation">;</span>  
    <span class="token keyword">public</span> <span class="token function">SecondEvent</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub  </span>
        mMsg <span class="token operator">=</span> <span class="token string">"MainEvent:"</span><span class="token operator">+</span>msg<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token keyword">return</span> mMsg<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre>
<p>3.</p>
<pre><code>package com.harvic.other;  

    public class ThirdEvent {  

    private String mMsg;  
    public ThirdEvent(String msg) {  
        // TODO Auto-generated constructor stub  
        mMsg = msg;  
    }  
    public String getMsg(){  
        return mMsg;  
    }  
}
</code></pre><h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><p>然后在SecondActivity中新建三个按钮，分别发送不同的类的实例，代码如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>tryeventbus2<span class="token punctuation">;</span>  

<span class="token keyword">import</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>other<span class="token punctuation">.</span>FirstEvent<span class="token punctuation">;</span>  
<span class="token keyword">import</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>other<span class="token punctuation">.</span>SecondEvent<span class="token punctuation">;</span>  
<span class="token keyword">import</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>other<span class="token punctuation">.</span>ThirdEvent<span class="token punctuation">;</span>  

<span class="token keyword">import</span> de<span class="token punctuation">.</span>greenrobot<span class="token punctuation">.</span>event<span class="token punctuation">.</span>EventBus<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span>  

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>  
    <span class="token keyword">private</span> Button btn_FirstEvent<span class="token punctuation">,</span> btn_SecondEvent<span class="token punctuation">,</span> btn_ThirdEvent<span class="token punctuation">;</span>  

    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_second<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        btn_FirstEvent <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_first_event<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        btn_SecondEvent <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_second_event<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        btn_ThirdEvent <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_third_event<span class="token punctuation">)</span><span class="token punctuation">;</span>  

        btn_FirstEvent<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  

            <span class="token annotation punctuation">@Override</span>  
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub  </span>
                EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>  
                <span class="token keyword">new</span> <span class="token class-name">FirstEvent</span><span class="token punctuation">(</span><span class="token string">"FirstEvent btn clicked"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

        btn_SecondEvent<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  

            <span class="token annotation punctuation">@Override</span>  
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub  </span>
                EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>  
                <span class="token keyword">new</span> <span class="token class-name">SecondEvent</span><span class="token punctuation">(</span><span class="token string">"SecondEvent btn clicked"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

        btn_ThirdEvent<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  

        <span class="token annotation punctuation">@Override</span>  
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub  </span>
                EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>  
                <span class="token keyword">new</span> <span class="token class-name">ThirdEvent</span><span class="token punctuation">(</span><span class="token string">"ThirdEvent btn clicked"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre>
<h3 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h3><p>在MainActivity中，除了注册与注册，我们利用onEventMainThread(FirstEvent event)来接收来自FirstEvent的消息，使用onEventMainThread(SecondEvent event)接收来自SecondEvent 实例的消息，使用onEvent(ThirdEvent event) 来接收ThirdEvent 实例的消息。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>tryeventbus2<span class="token punctuation">;</span>  

<span class="token keyword">import</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>other<span class="token punctuation">.</span>FirstEvent<span class="token punctuation">;</span>  
<span class="token keyword">import</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>other<span class="token punctuation">.</span>SecondEvent<span class="token punctuation">;</span>  
<span class="token keyword">import</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>other<span class="token punctuation">.</span>ThirdEvent<span class="token punctuation">;</span>  

<span class="token keyword">import</span> de<span class="token punctuation">.</span>greenrobot<span class="token punctuation">.</span>event<span class="token punctuation">.</span>EventBus<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>Menu<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>MenuItem<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">;</span>  

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>  

    Button btn<span class="token punctuation">;</span>  
    TextView tv<span class="token punctuation">;</span>  
    EventBus eventBus<span class="token punctuation">;</span>  

    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>  

        EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

        btn <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_try<span class="token punctuation">)</span><span class="token punctuation">;</span>  

        btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  

            <span class="token annotation punctuation">@Override</span>  
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub  </span>
                Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
                SecondActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEventMainThread</span><span class="token punctuation">(</span>FirstEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>         
        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"harvic"</span><span class="token punctuation">,</span> <span class="token string">"onEventMainThread收到了消息："</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEventMainThread</span><span class="token punctuation">(</span>SecondEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"harvic"</span><span class="token punctuation">,</span> <span class="token string">"onEventMainThread收到了消息："</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span>ThirdEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"harvic"</span><span class="token punctuation">,</span> <span class="token string">"OnEvent收到了消息："</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub  </span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre>
<p>到这里，代码就结束 了，从上面的代码，我们可以看到，EventBus是怎么接收消息的，是根据参数中类的实例的类型的判定的，所以当如果我们在接收时，同一个类的实例参数有两个函数来接收会怎样？答案是，这两个函数都会执行，下面实验一下：<br>在MainActivity中接收时，我们在接收SecondEvent时，在上面onEventMainThread基础上另加一个onEventBackgroundThread和onEventAsync，即下面的代码：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//SecondEvent接收函数一  </span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEventMainThread</span><span class="token punctuation">(</span>SecondEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"harvic"</span><span class="token punctuation">,</span> <span class="token string">"onEventMainThread收到了消息："</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  

<span class="token comment" spellcheck="true">//SecondEvent接收函数二  </span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEventBackgroundThread</span><span class="token punctuation">(</span>SecondEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>  
    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"harvic"</span><span class="token punctuation">,</span> <span class="token string">"onEventBackground收到了消息："</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  

<span class="token comment" spellcheck="true">//SecondEvent接收函数三  </span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEventAsync</span><span class="token punctuation">(</span>SecondEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>  
    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"harvic"</span><span class="token punctuation">,</span> <span class="token string">"onEventAsync收到了消息："</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre>
<p><strong>完整的代码在这里</strong>：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>tryeventbus2<span class="token punctuation">;</span>  

<span class="token keyword">import</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>other<span class="token punctuation">.</span>FirstEvent<span class="token punctuation">;</span>  
<span class="token keyword">import</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>other<span class="token punctuation">.</span>SecondEvent<span class="token punctuation">;</span>  
<span class="token keyword">import</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>other<span class="token punctuation">.</span>ThirdEvent<span class="token punctuation">;</span>  

<span class="token keyword">import</span> de<span class="token punctuation">.</span>greenrobot<span class="token punctuation">.</span>event<span class="token punctuation">.</span>EventBus<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>Menu<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>MenuItem<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">;</span>  

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>  

    Button btn<span class="token punctuation">;</span>  
    TextView tv<span class="token punctuation">;</span>  
    EventBus eventBus<span class="token punctuation">;</span>  

    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>  

        EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

        btn <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_try<span class="token punctuation">)</span><span class="token punctuation">;</span>  

        btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  

            <span class="token annotation punctuation">@Override</span>  
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub  </span>
                Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
                SecondActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEventMainThread</span><span class="token punctuation">(</span>FirstEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>         
        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"harvic"</span><span class="token punctuation">,</span> <span class="token string">"onEventMainThread收到了消息："</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token comment" spellcheck="true">//SecondEvent接收函数一  </span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEventMainThread</span><span class="token punctuation">(</span>SecondEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>   
        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"harvic"</span><span class="token punctuation">,</span> <span class="token string">"onEventMainThread收到了消息："</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span> 

    <span class="token comment" spellcheck="true">//SecondEvent接收函数二  </span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEventBackgroundThread</span><span class="token punctuation">(</span>SecondEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"harvic"</span><span class="token punctuation">,</span> <span class="token string">"onEventBackground收到了消息："</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token comment" spellcheck="true">//SecondEvent接收函数三  </span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEventAsync</span><span class="token punctuation">(</span>SecondEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"harvic"</span><span class="token punctuation">,</span> <span class="token string">"onEventAsync收到了消息："</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span>ThirdEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"harvic"</span><span class="token punctuation">,</span> <span class="token string">"OnEvent收到了消息："</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub  </span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre>
<p>经过上面的分析，当发送SecondEvent实例的消息过来的时候，这三个函数会同时接收到并各自执行，所以当点击Second Event这个button的时候，会出现下面的结果：</p>
<p><img src="http://ovmzdfex7.bkt.clouddn.com/17-9-2/73561109.jpg" alt=""></p>
<p><strong>消息的接收是根据参数中的类名来决定执行哪一个的</strong></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开源库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EventBus使用一-基础]]></title>
      <url>/2016/04/10/%E5%BC%80%E6%BA%90%E5%BA%93_EventBus%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>Android中EventBus的基础使用</p>
<p><a href="http://greenrobot.org/eventbus/" target="_blank" rel="external">官网</a> | <a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">GitHub</a> |<a href="http://blog.csdn.net/harvic880925/article/details/40660137" target="_blank" rel="external">转载</a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>EventBus是一款针对Android优化的发布/订阅事件总线。主要功能是替代Intent,Handler,BroadCast在Fragment，Activity，Service，线程之间传递消息.优点是开销小，代码更优雅。以及将发送者和接收者解耦。</p>
<h3 id="项目中添加EventBus依赖"><a href="#项目中添加EventBus依赖" class="headerlink" title="项目中添加EventBus依赖"></a>项目中添加EventBus依赖</h3><pre><code>compile &#39;org.greenrobot:eventbus:3.0.0&#39;
</code></pre><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>(1)自定义一个类，可以是空类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnyEventType</span> <span class="token punctuation">{</span>
     <span class="token keyword">public</span> <span class="token function">AnyEventType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre>
<p>(2)在要接收消息的页面注册</p>
<pre class=" language-java"><code class="language-java">eventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>(3)发送消息</p>
<pre><code>eventBus.post(new AnyEventType event);
</code></pre><p>(4)接受消息的页面实现(共有四个函数，各功能不同，这是其中之一，可以选择性的实现，这里先实现一个)：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span>AnyEventType event<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre>
<p>(5)解除注册</p>
<pre class=" language-java"><code class="language-java">eventBus<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>先给大家看个例子：</p>
<p>当击btn_try按钮的时候，跳到第二个Activity，当点击第二个activity上面的First Event按钮的时候向第一个Activity发送消息，当第一个Activity收到消息后，一方面将消息Toast显示，一方面放入textView中显示。</p>
<p><img src="http://ovmzdfex7.bkt.clouddn.com/17-9-2/91400074.jpg" alt=""></p>
<h3 id="基本框架搭建"><a href="#基本框架搭建" class="headerlink" title="基本框架搭建"></a>基本框架搭建</h3><p>想必大家从一个Activity跳转到第二个Activity的程序应该都会写，这里先稍稍把两个Activity跳转的代码建起来。后面再添加EventBus相关的玩意。</p>
<p><strong>MainActivity布局（activity_main.xml）</strong></p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>  
    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>  
    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>  
    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>  
    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>   
    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/btn_try<span class="token punctuation">"</span></span>  
    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>  
    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>  
    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn_bty<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>   
    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv<span class="token punctuation">"</span></span>  
    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>  
    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>
</code></pre>
<p><strong>新建一个Activity，SecondActivity布局（activity_second.xml）</strong></p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>  
    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>  
    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>  
    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>  
    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>  
    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.harvic.try_eventbus_1.SecondActivity<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>  

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>   
    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/btn_first_event<span class="token punctuation">"</span></span>  
    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>  
    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>  
    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>First Event<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>
</code></pre>
<p><strong>MainActivity.java （点击btn跳转到第二个Activity）</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>  

    Button btn<span class="token punctuation">;</span>  

    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>  

        btn <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_try<span class="token punctuation">)</span><span class="token punctuation">;</span>  

        btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  

        <span class="token annotation punctuation">@Override</span>  
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token comment" spellcheck="true">// TODO Auto-generated method stub  </span>
            Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
            SecondActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

<span class="token punctuation">}</span>
</code></pre>
<p>到这，基本框架就搭完了，下面开始按步骤使用EventBus了。</p>
<h3 id="新建一个类FirstEvent"><a href="#新建一个类FirstEvent" class="headerlink" title="新建一个类FirstEvent"></a>新建一个类FirstEvent</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>other<span class="token punctuation">;</span>  

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstEvent</span> <span class="token punctuation">{</span>  

    <span class="token keyword">private</span> String mMsg<span class="token punctuation">;</span>  
    <span class="token keyword">public</span> <span class="token function">FirstEvent</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub  </span>
        mMsg <span class="token operator">=</span> msg<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token keyword">return</span> mMsg<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre>
<p>这个类很简单，构造时传进去一个字符串，然后可以通过getMsg()获取出来。</p>
<h3 id="接收消息的页面注册EventBus"><a href="#接收消息的页面注册EventBus" class="headerlink" title="接收消息的页面注册EventBus"></a>接收消息的页面注册EventBus</h3><p>在上面的GIF图片的演示中，大家也可以看到，我们是要在MainActivity中接收发过来的消息的，所以我们在MainActivity中注册消息。</p>
<p>通过我们会在OnCreate()函数中注册EventBus，在OnDestroy（）函数中反注册。所以整体的注册与反注册的代码如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tryeventbus_simple<span class="token punctuation">;</span>  

<span class="token keyword">import</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>other<span class="token punctuation">.</span>FirstEvent<span class="token punctuation">;</span>  

<span class="token keyword">import</span> de<span class="token punctuation">.</span>greenrobot<span class="token punctuation">.</span>event<span class="token punctuation">.</span>EventBus<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toast<span class="token punctuation">;</span>  

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>  

    Button btn<span class="token punctuation">;</span>  
    TextView tv<span class="token punctuation">;</span>  

    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment" spellcheck="true">//注册EventBus  </span>
        EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

        btn <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_try<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        tv <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv<span class="token punctuation">)</span><span class="token punctuation">;</span>  

        btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  

        <span class="token annotation punctuation">@Override</span>  
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token comment" spellcheck="true">// TODO Auto-generated method stub  </span>
            Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
            SecondActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反注册EventBus  </span>
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre>
<h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h3><p>发送消息是使用EventBus中的Post方法来实现发送的，发送过去的是我们新建的类的实例！</p>
<pre class=" language-java"><code class="language-java">EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FirstEvent</span><span class="token punctuation">(</span><span class="token string">"FirstEvent btn clicked"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>完整的SecondActivity.java的代码如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tryeventbus_simple<span class="token punctuation">;</span>  

<span class="token keyword">import</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>other<span class="token punctuation">.</span>FirstEvent<span class="token punctuation">;</span>  

<span class="token keyword">import</span> de<span class="token punctuation">.</span>greenrobot<span class="token punctuation">.</span>event<span class="token punctuation">.</span>EventBus<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span>  

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>  
    <span class="token keyword">private</span> Button btn_FirstEvent<span class="token punctuation">;</span>  

    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_second<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        btn_FirstEvent <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_first_event<span class="token punctuation">)</span><span class="token punctuation">;</span>  

        btn_FirstEvent<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  

        <span class="token annotation punctuation">@Override</span>  
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub  </span>
        EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>  
        <span class="token keyword">new</span> <span class="token class-name">FirstEvent</span><span class="token punctuation">(</span><span class="token string">"FirstEvent btn clicked"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre>
<h3 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h3><p>接收消息时，我们使用EventBus中最常用的onEventMainThread（）函数来接收消息，具体为什么用这个，我们下篇再讲，这里先给大家一个初步认识，要先能把EventBus用起来先。 在MainActivity中重写onEventMainThread（FirstEvent event），参数就是我们自己定义的类：</p>
<p>在收到Event实例后，我们将其中携带的消息取出，一方面Toast出去，一方面传到TextView中；</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEventMainThread</span><span class="token punctuation">(</span>FirstEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  

String msg <span class="token operator">=</span> <span class="token string">"onEventMainThread收到了消息："</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"harvic"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  
tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  
Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre>
<p>完整的MainActiviy代码如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>tryeventbus_simple<span class="token punctuation">;</span>  

<span class="token keyword">import</span> com<span class="token punctuation">.</span>harvic<span class="token punctuation">.</span>other<span class="token punctuation">.</span>FirstEvent<span class="token punctuation">;</span>  

<span class="token keyword">import</span> de<span class="token punctuation">.</span>greenrobot<span class="token punctuation">.</span>event<span class="token punctuation">.</span>EventBus<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">;</span>  
<span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toast<span class="token punctuation">;</span>  

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>  

    Button btn<span class="token punctuation">;</span>  
    TextView tv<span class="token punctuation">;</span>  

    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>  

        EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

        btn <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_try<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        tv <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv<span class="token punctuation">)</span><span class="token punctuation">;</span>  

        btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  

        <span class="token annotation punctuation">@Override</span>  
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token comment" spellcheck="true">// TODO Auto-generated method stub  </span>
            Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
                    SecondActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                    <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEventMainThread</span><span class="token punctuation">(</span>FirstEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  

        String msg <span class="token operator">=</span> <span class="token string">"onEventMainThread收到了消息："</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"harvic"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  

    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre>
<p>更多是使用<a href="../../15/开源库_EventBus进阶使用/index.html"><strong>EventBus使用二-进阶</strong></a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开源库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ButterKnife使用]]></title>
      <url>/2016/04/01/%E5%BC%80%E6%BA%90%E5%BA%93_ButterKnife%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>Android中ButterKnife的使用</p>
<p><a href="http://jakewharton.github.io/butterknife/" target="_blank" rel="external">官方网站</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ButterKnife意为“黄油刀”，意思是此开源库可以让你的应用开发过程像用刀切黄油一样干净利落。此库的核心功能是通过注解来实现视图的注入，从而在代码中避免冗余的方法调用和丑陋的内部类监听器。<br>简单的理解“绑定”的概念，就是讲View和任意一个对象相互关联，从而在该对象中，不用<strong>findViewById</strong>就能使用View上的所有子视图，不用<strong>setOnClickListener</strong>就能给控件设置监听。</p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>注解(Annotation)是JDK 1.5之后引入的特性，它是一种元数据(meta-data)，即描述数据的数据。元数据这个概念比较难理解，简单的理解，就是对代码的标注，告诉编译器某一段代码需要做怎样的处理。<br>其实我们早就见过注解，在方法重写时，@Override就是一个注解，去掉@Override，代码一样可以运行，增加这个注解的好处，一是增加代码可读性，二是编译器能帮你做一些自动检查，增加代码健壮性。<br>Android引入了两个非常有用的注解，@Nullable和@NonNull，用来标识方法参数或者方法返回值等是否可以为null。以前编程时，为了避免NullPointerException，最终代码中往往到处都是if(Obj == null){…}这样的代码，这是很糟糕的编码方式，有了这两个注解，代码就清晰多了。<br>另外Android中注解的一个重要应用是代替枚举类型，这方面可以参考在Toast中的使用。</p>
<h2 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h2><p>在Android Studio中使用，只需添加依赖：</p>
<pre class=" language-java"><code class="language-java">compile <span class="token string">'com.jakewharton:butterknife:7.0.1'</span>
</code></pre>
<p>另外最好在build.gradle中关闭一项lint警告：</p>
<pre class=" language-java"><code class="language-java">lintOptions <span class="token punctuation">{</span>
  disable <span class="token string">'InvalidPackage'</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>ButterKnife通过@Bind注解和视图Id帮你做两件事：找到视图和将视图转型为对应的子类型。例如以下的代码：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ExampleActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Bind</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>title<span class="token punctuation">)</span> TextView title<span class="token punctuation">;</span>
  <span class="token annotation punctuation">@Bind</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>subtitle<span class="token punctuation">)</span> TextView subtitle<span class="token punctuation">;</span>
  <span class="token annotation punctuation">@Bind</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>footer<span class="token punctuation">)</span> TextView footer<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>simple_activity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// TODO Use fields...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>ButterKnife不是通过反射，而是通过自动生成代码来执行View的查找，上面的例子中，ButterKnife最终自动生成的代码大概是这样的：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span>ExampleActivity activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  activity<span class="token punctuation">.</span>subtitle <span class="token operator">=</span> <span class="token punctuation">(</span>android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">)</span> activity<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token number">2130968578</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  activity<span class="token punctuation">.</span>footer <span class="token operator">=</span> <span class="token punctuation">(</span>android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">)</span> activity<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token number">2130968579</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  activity<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token punctuation">(</span>android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">)</span> activity<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token number">2130968577</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="资源绑定"><a href="#资源绑定" class="headerlink" title="资源绑定"></a>资源绑定</h3><p>ButterKnife预定义了注解@BindBool, @BindColor, @BindDimen, @BindDrawable, @BindInt, @BindString，用来执行资源的绑定。如下所示：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ExampleActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@BindString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>title<span class="token punctuation">)</span> String title<span class="token punctuation">;</span>
  <span class="token annotation punctuation">@BindDrawable</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>graphic<span class="token punctuation">)</span> Drawable graphic<span class="token punctuation">;</span>
  <span class="token annotation punctuation">@BindColor</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>color<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token keyword">int</span> red<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// int or ColorStateList field</span>
  <span class="token annotation punctuation">@BindDimen</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>dimen<span class="token punctuation">.</span>spacer<span class="token punctuation">)</span> Float spacer<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// int (for pixel size) or float (for exact value) field</span>
  <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="非Activity绑定"><a href="#非Activity绑定" class="headerlink" title="非Activity绑定"></a>非Activity绑定</h3><p>除了Activity，你也可以将任意的对象与View绑定。<br>例如在Fragment中：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FancyFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Bind</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>button1<span class="token punctuation">)</span> Button button1<span class="token punctuation">;</span>
  <span class="token annotation punctuation">@Bind</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>button2<span class="token punctuation">)</span> Button button2<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> ViewGroup container<span class="token punctuation">,</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    View view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fancy_fragment<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// TODO Use fields...</span>
    <span class="token keyword">return</span> view<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>或在适配器中：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">BaseAdapter</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> View <span class="token function">getView</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">,</span> View view<span class="token punctuation">,</span> ViewGroup parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ViewHolder holder<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      holder <span class="token operator">=</span> <span class="token punctuation">(</span>ViewHolder<span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>whatever<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ViewHolder</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>
      view<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    holder<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"John Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// etc...</span>

    <span class="token keyword">return</span> view<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ViewHolder</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bind</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>title<span class="token punctuation">)</span> TextView name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Bind</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>job_title<span class="token punctuation">)</span> TextView jobTitle<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">ViewHolder</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>任何原来需要使用findViewById的地方都可以用ButterKnife.bind替代。<br>用于绑定的API：<br>如果使用了MVC模式，将控制器的Activity和视图绑定，可以用ButterKnife.bind(this, activity)。<br>将自定义视图绑定到自身，可以用ButterKnife.bind(this)。</p>
<h3 id="绑定视图列表"><a href="#绑定视图列表" class="headerlink" title="绑定视图列表"></a>绑定视图列表</h3><p>可以将多个视图放在List或数组中。<br>@Bind({ R.id.first_name, R.id.middle_name, R.id.last_name })<br>List<edittext> nameViews;<br>apply方法让你可以同时操作列表中的所有视图：</edittext></p>
<pre class=" language-java"><code class="language-java">ButterKnife<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>nameViews<span class="token punctuation">,</span> DISABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
ButterKnife<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>nameViews<span class="token punctuation">,</span> ENABLED<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Action和Setter接口可以用来指定简单的操作：
<span class="token keyword">static</span> <span class="token keyword">final</span> ButterKnife<span class="token punctuation">.</span>Action<span class="token operator">&lt;</span>View<span class="token operator">></span> DISABLE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ButterKnife<span class="token punctuation">.</span>Action</span><span class="token operator">&lt;</span>View<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    view<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> ButterKnife<span class="token punctuation">.</span>Setter<span class="token operator">&lt;</span>View<span class="token punctuation">,</span> Boolean<span class="token operator">></span> ENABLED <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ButterKnife<span class="token punctuation">.</span>Setter</span><span class="token operator">&lt;</span>View<span class="token punctuation">,</span> Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>View view<span class="token punctuation">,</span> Boolean value<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    view<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>apply方法还能用来设置View的属性：</p>
<pre class=" language-java"><code class="language-java">ButterKnife<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>nameViews<span class="token punctuation">,</span> View<span class="token punctuation">.</span>ALPHA<span class="token punctuation">,</span> <span class="token number">0.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="监听接口的绑定"><a href="#监听接口的绑定" class="headerlink" title="监听接口的绑定"></a>监听接口的绑定</h3><p>监听器可以自动在方法上配置，如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@OnClick</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>submit<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submit</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// TODO submit data to server...</span>
<span class="token punctuation">}</span>
监听器方法的参数是可选的：
<span class="token annotation punctuation">@OnClick</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>submit<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// TODO submit data to server...</span>
<span class="token punctuation">}</span>
监听器方法的参数可以是具体的类型，它会被自动转型：
<span class="token annotation punctuation">@OnClick</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>submit<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span>Button button<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  button<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
也可以在单个绑定中指定多个ID来进行常见的事件处理：
<span class="token annotation punctuation">@OnClick</span><span class="token punctuation">(</span><span class="token punctuation">{</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>door1<span class="token punctuation">,</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>door2<span class="token punctuation">,</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>door3 <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pickDoor</span><span class="token punctuation">(</span>DoorView door<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>door<span class="token punctuation">.</span><span class="token function">hasPrizeBehind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"You win!"</span><span class="token punctuation">,</span> LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"Try again"</span><span class="token punctuation">,</span> LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
自定义视图自己的监听器可以省去ID：
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FancyButton</span> <span class="token keyword">extends</span> <span class="token class-name">Button</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@OnClick</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// TODO do something!</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="绑定的重置"><a href="#绑定的重置" class="headerlink" title="绑定的重置"></a>绑定的重置</h3><p>Fragment生命周期和Activity不同，当在onCreateView中绑定视图后，要在onDestroyView中将这些视图置为null，ButterKnife提供了Unbinder接口来自动做这件事，如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FancyFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Bind</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>button1<span class="token punctuation">)</span> Button button1<span class="token punctuation">;</span>
  <span class="token annotation punctuation">@Bind</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>button2<span class="token punctuation">)</span> Button button2<span class="token punctuation">;</span>
  <span class="token annotation punctuation">@Unbinder</span> ButterKnife<span class="token punctuation">.</span>Unbinder unbinder<span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> View <span class="token function">onCreateView</span><span class="token punctuation">(</span>LayoutInflater inflater<span class="token punctuation">,</span> ViewGroup container<span class="token punctuation">,</span> Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    View view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fancy_fragment<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// TODO Use fields...</span>
    <span class="token keyword">return</span> view<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    unbinder<span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="可选绑定"><a href="#可选绑定" class="headerlink" title="可选绑定"></a>可选绑定</h3><p>在默认情况下，如果ID对应的视图没有找到，会抛异常。要使用可选绑定，添加@Nullable或@Optional注解即可：</p>
<pre><code>@Nullable @Bind(R.id.might_not_be_there) TextView mightNotBeThere;

@Optional @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {
  // TODO ...
}
</code></pre><h3 id="多方法监听器"><a href="#多方法监听器" class="headerlink" title="多方法监听器"></a>多方法监听器</h3><p>如果注解对应的监听器有多个回掉方法，可以绑定任意一个方法。每种注解都有默认的回掉方法，可以通过callback参数指定为其它的回掉方法：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@OnItemSelected</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>list_view<span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">onItemSelected</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// TODO ...</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@OnItemSelected</span><span class="token punctuation">(</span>value <span class="token operator">=</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>maybe_missing<span class="token punctuation">,</span> callback <span class="token operator">=</span> NOTHING_SELECTED<span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">onNothingSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// TODO ...</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>对于无法直接绑定视图的常见，ButterKnife提供了<strong>findById</strong>方法简化操作，它通过泛型操作将返回值自动转型。</p>
<pre class=" language-java"><code class="language-java">View view <span class="token operator">=</span> LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>thing<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
TextView firstName <span class="token operator">=</span> ButterKnife<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>first_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
TextView lastName <span class="token operator">=</span> ButterKnife<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>last_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
ImageView photo <span class="token operator">=</span> ButterKnife<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>photo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开源库 </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[About Me]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><p>大家可以这样称呼我：<em>LuckyXiang</em> Or 祥云飘飘</p>
<p>博客是重新搭起来的，自己好多的笔记和文章还没有来的及放上去。</p>
<h1 id="To-Contact-Me"><a href="#To-Contact-Me" class="headerlink" title="To Contact Me"></a>To Contact Me</h1><p><strong>e-mail:</strong> 997791972@qq.com</p>
<p><strong>GitHub:</strong> <a href="https://github.com/LuckyXiang" target="_blank" rel="external">LuckyXiang</a></p>
<p><strong>网易云音乐：</strong> <a href="http://music.163.com/#/user/home?id=120868189" target="_blank" rel="external">一念执着婷</a></p>
<p><strong>Location:</strong> 中国北京</p>
]]></content>
    </entry>
    
  
</search>
